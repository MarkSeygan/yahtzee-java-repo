
//    FF   FF     F     F     F      F    F    F
//   FF     FF   FF     FF   FFF   FFF   FFF   FFF
//    F     F     FF   FF      F    F    F      F

     p('F',[-1,1, -1,2,  0,1, 1,1],
           [ 0,1,  1,1,  1,2, 2,1],
           [-1,1,  0,1,  2,1, 2,2],
           [-2,1, -1,1, -1,2, 0,1],
           [-1,1,  0,1,  0,2, 1,2],
           [-1,2,  0,1,  0,2, 1,1],
           [-1,1,  0,1,  0,2, 2,0],
           [ 1,0,  1,1,  1,2, 2,1]).

 lin q('F').

//   I   IIIII
//   I    
//   I   
//   I   
//   I   

     p('I',[1,0, 2,0, 3,0, 4,0],
           [0,1, 0,2, 0,3, 0,4],
           x,x,x,x,x,x).

 lin q('I').

//   L     L   LL   LL   LLLL   L      LLLL      L
//   L     L   L     L   L      LLLL      L   LLLL
//   L     L   L     L     
//   LL   LL   L     L                   

     p('L',[ 1,0,  2,0,  3,0, 3,1],
           [-3,1, -2,1, -1,1, 0,1],
           [ 0,1,  1,0,  2,0, 3,0],
           [ 0,1,  1,1   2,1, 3,1],
           [ 0,1,  0,2,  0,3, 1,0],
           [ 1,0,  1,1,  1,2, 1,3],
           [ 0,1,  0,2,  0,3, 1,3],
           [-1,3,  0,1   0,2, 0,3]).

 lin q('L').

//   N     N    N   N      NN   NNN    NN      NNN
//   NN   NN    N   N    NNN      NN    NNN   NN
//    N   N    NN   NN      
//    N   N    N     N      

     p('N',[ 1,0,  1,1,  2,1, 3,1],
           [-1,1,  0,1,  1,0, 2,0],
           [-2,1, -1,1,  0,1, 1,0],
           [ 1,0,  2,0,  2,1, 3,1],
           [-1,2, -1,3,  0,1, 0,2],
           [ 0,1,  0,2,  1,2, 1,3],
           [ 0,1,  1,1,  1,2, 1,3],
           [-1,1, -1,2, -1,3, 0,1]).

   lin q('N').


//   PP   PP   P     P   PPP    PP   PPP   PP
//   PP   PP   PP   PP    PP   PPP   PP    PPP
//   P     P   PP   PP  

     p('P',[ 0,1,  1,0, 1,1, 2,0],
           [ 0,1,  1,0, 1,1, 2,0],
           [ 1,0,  1,1, 2,0, 2,1],
           [-1,1,  0,1, 1,0, 1,1],
           [ 0,1,  0,2, 1,1, 1,2],
           [-1,1, -1,2, 0,1, 0,2],
           [ 0,1,  0,2, 1,0, 1,1],
           [ 0,1,  1,0, 1,1, 1,2]).

 lin q('P').

//   TTT    T      T   T
//    T     T    TTT   TTT
//    T    TTT     T   T

     p('T',[ 0,1,  0,2, 1,1, 2,1],
           [-2,1, -1,1, 0,1, 0,2],
           [-1,2,  0,1, 0,2, 1,2],
           [ 1,0,  1,1, 1,2, 2,0],
           x,x,x,x).

 lin q('T').

//   U U   UUU   UU   UU
//   UUU   U U   U     U
//               UU   UU

     p('U',[0,2, 1,0, 1,1, 1,2],
           [0,1, 0,2, 1,0, 1,2],
           [0,1, 1,0, 2,0, 2,1],
           [0,1, 1,1, 2,0, 2,1],
           x,x,x,x).

 lin q('U').

//   V       V   VVV   VVV
//   V       V   V       V
//   VVV   VVV   V       V 

     p('V',[ 1,0,   2,0, 2,1, 2,2],
           [-2,-2, -1,2, 0,1, 0,2],
           [ 0,1,   0,2, 1,0, 2,0],
           [ 0,1,   0,2, 1,2, 2,2],
           x,x,x,x).

 lin q('V').

//   W       W    WW   WW  
//   WW     WW   WW     WW
//    WW   WW    W       W

     p('W',[ 1,0,  1,1,  2,1, 2,2],
           [-2,2, -1,1, -1,2, 0,1],
           [-1,1, -1,2,  0,1, 1,0],
           [ 0,1,  1,1,  1,2, 2,2],
           x,x,x,x).

 lin q('W').

//   X  
//  XXX 
//   X  

     p('X',[-1,1, 0,1, 0,2, 1,1],
           x,x,x,x,x,x,x).

 lin q('X').

//   Y     Y   Y     Y   YYYY     Y    YYYY    Y
//   YY   YY   Y     Y     Y    YYYY    Y     YYYY
//   Y     Y   YY   YY   
//   Y     Y   Y     Y   

     p('Y',[ 1,0,  1,1, 2,0, 3,0],
           [-1,1,  0,1, 1,1, 1,2],
           [ 1,0,  2,0, 2,1, 3,0],
           [-2,1, -1,1, 0,1, 1,1],
           [ 0,1,  0,2, 0,3, 1,2],
           [-1,2,  0,1, 0,2, 0,3],
           [ 0,1,  0,2, 0,3, 1,1],
           [-1,1,  0,1, 0,2, 0,3]).

 lin q('Y').

//   ZZ     ZZ     Z   Z
//    Z     Z    ZZZ   ZZZ
//    ZZ   ZZ    Z       Z

     p('Z',[ 0,1,  1,1,  2,1, 2,2],
           [-2,1, -2,2, -1,1, 0,1],
           [-1,-2, 0,1,  0,2, 1,0],
           [ 1,0,  1,1,  1,2, 2,2],
           x,x,x,x).

 lin q('Z').

 lin b(1;r,1;c).  // board
     
 pentomino(R) :- rule(0,[],R).
 
 rule(12,X,X).

 rule(N,X,Y) :- q(L) * Once p(L,P1,P2,P3,P4,P5,P6,P7,P8) * Once b(R,C) *
                (m(P1,R,C) * S=1 + 
                  list(P2) * (m(P2,R,C) * S=2 +
                    list(P3) * (m(P3,R,C) * S=3 + m(P4,R,C) * S=4 +
                      list(P5) * (m(P5,R,C) * S=5 + m(P6,R,C) * S=6 +
                        m(P7,R,C) * S=7 + m(P8,R,C) * [S=8])))) *
                [N1=N+1] * rule(N1,[L,S,R,C|X],Y).
 
 m([],_,_).
 m([I,J|IJ],R,C) :- `I1=R+I` * `J1=C+J` * Once b(I1,J1) * m(IJ,R,C). // match pattern


//------------------------ output ------------------------------------------

 Com y(1;r,1;c,X).

 out([]) :- line * write(nl,'      ') * forC(1,0) * forR(1) * line.

 out([L,S,R,C|Y]) :- AOnce p(L,P1,P2,P3,P4,P5,P6,P7,P8)*
                     (S==1 * u(L,P1,R,C) + S==2 * u(L,P2,R,C)+
                      S==3 * u(L,P3,R,C) + S==4 * u(L,P4,R,C)+
                      S==5 * u(L,P5,R,C) + S==6 * u(L,P6,R,C)+
                      S==7 * u(L,P7,R,C) + u(L,P8,R,C)) * out(Y).
 
 u(L,[],R,C) :- y(R,C,L).

 u(L,[I,J|IJ],R,C) :- `I1=R+I` * `J1=C+J` * Once y(I1,J1,L) * u(L,IJ,R,C).

 line :- write(nl,'      -') * repeat(c) * write('--') * fail + succ.

 forR(r).

 forR(R) :- `R1=R+1` * k(R,R1) * write(nl,'      ') * forC(R1,0) * forR(R1).
  
 k(R,R1) :- write(nl,'      |') * k(R,R1,0,' ','-') * write('|').

 k(_,_,c,_,_).

 k(R,R1,C,S,E) :- `C1=C+1` * Once y(R,C1,L) *
                  (Once y(R1,C1,L) * write(S) + write(E)) * 
                  k(R,R1,C1,'  ',' -').
  
 forC(_,c) :- write('|').

 forC(R,C) :- `C1=C+1` * Once y(R,C1,L) *
               Once (y(R,C,L) * write(' ') + write('|')) * 
              write(L) * forC(R,C1).


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  There are twelve different pentominoes, and they are named after 
  letters of the alphabet - F,I,L,N,P,T,U,V,X,Y,W,Z. 
  Pentominoes can be rotated or have mirror image.
  Pentomino puzzle is to tile a rectangular box with
  the pentominoes (cover it without overlap and without gaps).          */
